name: Move new issues to correct docs repo

# **What it does**: If anyone creates an issue in the docs-internal repo for the engineering team or the content team, move that issue and notify the author
# **Why we have it**: We don't want engineering or content issues in the docs-internal repo
# **Who does it impact**: GitHub staff.

on:
  issues:
    types:
      - opened
      - transferred
      - reopened

jobs:
  transfer_issue:
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.repository == 'github/docs-internal'
    steps:
      - id: move_to_correct_repo
        uses: actions/github-script@626af12fe9a53dc2972b48385e7fe7dec79145c9
        env:
          TEAM_ENGINEERING_REPO: ${{ secrets.TEAM_ENGINEERING_REPO }}
          TEAM_CONTENT_REPO: ${{ secrets.TEAM_CONTENT_REPO }}
        with:
          github-token: ${{ secrets.DOCUBOT_FR_PROJECT_BOARD_WORKFLOWS_REPO_ORG_READ_SCOPES }}
          script: |
            const issueNo = context.issue.number
            const owner = 'github'
            const originalRepo = 'docs-internal'

            // See if the engineering label is present.
            const engineeringLabel = context.payload.issue.labels.find(label => label.name === 'engineering')

            // Transfer engineering issues to the engineering repo and everything else to the Docs Content repo
            let correctRepo = process.env.TEAM_CONTENT_REPO
            if (engineeringLabel) {
              correctRepo = process.env.TEAM_ENGINEERING_REPO
            }

            const correctRepoObject = await github.repos.get({
              owner: owner,
              repo: correctRepo
            })

            // Post a comment in the docs-internal issue
            await github.issues.createComment({
              owner: owner,
              repo: originalRepo,
              issue_number: issueNo,
              body: `ðŸ‘‹  Moving forward, we're asking that folks create all new Docs issues in the [${process.env.TEAM_ENGINEERING_REPO}](${process.env.TEAM_ENGINEERING_REPO}) repo and all new content issues in [${process.env.TEAM_CONTENT_REPO}](${process.env.TEAM_CONTENT_REPO}). We transferred it for you!`
            })

            // Transfer the issue to the correct repo
            const issueNodeId = context.payload.issue.node_id
            const correctRepositoryNodeId = correctRepoObject.data.node_id
            console.log(`Issue GraphQL Node ID: ${issueNodeId}`)
            console.log(`Repository GraphQL Node ID: ${correctRepositoryNodeId}`)

            const mutation = `mutation ($id: ID!, $repositoryId: ID!) {
              transferIssue(input: {
                issueId: $id,
                repositoryId: $repositoryId
              }) {
                issue {
                  url,
                  number
                }
              }
            }`

            const variables = {
              id: issueNodeId,
              repositoryId: correctRepositoryNodeId
            }

            const graph = await github.graphql(mutation, variables)
            console.log('GraphQL mutation result:\n' + JSON.stringify(graph))

            // Add the same labels to the new issue
            const newIssueNumber = graph.transferIssue.issue.number
            await github.issues.addLabels({
              owner: owner,
              repo: correctRepo,
              issue_number: newIssueNumber,
              labels: context.payload.issue.labels.map(label => label.name),
            })
